import type { CanvasRenderer } from 'pixijs/renderer/canvas';
import type { ExtensionMetadata } from 'pixijs/core';
import type { Mesh } from 'pixijs/mesh';
/**
 * Renderer dedicated to meshes.
 * @class
 * @protected
 * @memberof PIXI
 */
export declare class CanvasMeshRenderer {
    /** @ignore */
    static extension: ExtensionMetadata;
    /** A reference to the current renderer */
    renderer: CanvasRenderer;
    /** @param renderer - A reference to the current renderer */
    constructor(renderer: CanvasRenderer);
    /**
     * Renders the Mesh
     * @param mesh - the Mesh to render
     */
    render(mesh: Mesh): void;
    /**
     * Draws the object in Triangle Mesh mode
     * @private
     * @param mesh - the Mesh to render
     */
    private _renderTriangleMesh;
    /**
     * Draws the object in triangle mode using canvas
     * @private
     * @param mesh - the current mesh
     */
    private _renderTriangles;
    /**
     * Draws one of the triangles that from the Mesh
     * @private
     * @param mesh - the current mesh
     * @param index0 - the index of the first vertex
     * @param index1 - the index of the second vertex
     * @param index2 - the index of the third vertex
     */
    private _renderDrawTriangle;
    /**
     * Renders a flat Mesh
     * @private
     * @param mesh - The Mesh to render
     */
    renderMeshFlat(mesh: Mesh): void;
    /** destroy the renderer */
    destroy(): void;
}
