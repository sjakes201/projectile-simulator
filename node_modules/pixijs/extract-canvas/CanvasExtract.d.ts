import { Rectangle, RenderTexture } from 'pixijs/core';
import type { CanvasRenderer } from 'pixijs/renderer/canvas';
import type { ExtensionMetadata, ICanvas, ISystem } from 'pixijs/core';
import type { DisplayObject } from 'pixijs/display';
import type { IExtract } from 'pixijs/extract';
/**
 * The extract manager provides functionality to export content from the renderers.
 *
 * An instance of this class is automatically created by default, and can be found at `renderer.extract`
 * @class
 * @memberof PIXI
 */
export declare class CanvasExtract implements ISystem, IExtract {
    /** @ignore */
    static extension: ExtensionMetadata;
    /** A reference to the current renderer */
    renderer: CanvasRenderer;
    /**
     * @param renderer - A reference to the current renderer
     */
    constructor(renderer: CanvasRenderer);
    /**
     * Will return a HTML Image of the target
     * @param target - A displayObject or renderTexture
     *  to convert. If left empty will use the main renderer
     * @param format - Image format, e.g. "image/jpeg" or "image/webp".
     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.
     * @returns HTML Image of the target
     */
    image(target?: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<HTMLImageElement>;
    /**
     * Will return a base64 encoded string of this target. It works by calling
     *  `CanvasExtract.getCanvas` and then running toDataURL on that.
     * @param target - A displayObject or renderTexture
     *  to convert. If left empty will use the main renderer
     * @param format - Image format, e.g. "image/jpeg" or "image/webp".
     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.
     * @returns A base64 encoded string of the texture.
     */
    base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<string>;
    /**
     * Creates a Canvas element, renders this target to it and then returns it.
     * @param target - A displayObject or renderTexture
     *  to convert. If left empty will use the main renderer
     * @param frame - The frame the extraction is restricted to.
     * @returns A Canvas element with the texture rendered on.
     */
    canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas;
    /**
     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA
     * order, with integer values between 0 and 255 (included).
     * @param target - A displayObject or renderTexture
     *  to convert. If left empty will use the main renderer
     * @param frame - The frame the extraction is restricted to.
     * @returns One-dimensional array containing the pixel data of the entire texture
     */
    pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8ClampedArray;
    /** Destroys the extract */
    destroy(): void;
}
