import { LoaderParserPriority, checkExtension, createTexture } from 'pixijs/assets';
import { CompressedTextureResource } from 'pixijs/compressed-textures';
import { ExtensionType, settings, FORMATS, BaseTexture, MIPMAP_MODES, ALPHA_MODES, extensions } from 'pixijs/core';
import { BASIS_FORMAT_TO_TYPE, BASIS_FORMATS } from '../Basis.mjs';
import { TranscoderWorker } from '../TranscoderWorker.mjs';
import { BasisParser } from './BasisParser.mjs';

const loadBasis = {
  extension: {
    type: ExtensionType.LoadParser,
    priority: LoaderParserPriority.High
  },
  test(url) {
    return checkExtension(url, ".basis");
  },
  async load(url, asset, loader) {
    await TranscoderWorker.onTranscoderInitialized;
    const response = await settings.ADAPTER.fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    const resources = await BasisParser.transcode(arrayBuffer);
    const type = BASIS_FORMAT_TO_TYPE[resources.basisFormat];
    const format = resources.basisFormat !== BASIS_FORMATS.cTFRGBA32 ? FORMATS.RGB : FORMATS.RGBA;
    const textures = resources.map((resource) => {
      const base = new BaseTexture(resource, {
        mipmap: resource instanceof CompressedTextureResource && resource.levels > 1 ? MIPMAP_MODES.ON_MANUAL : MIPMAP_MODES.OFF,
        alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,
        type,
        format,
        ...asset.data
      });
      return createTexture(base, loader, url);
    });
    return textures.length === 1 ? textures[0] : textures;
  },
  unload(texture) {
    if (Array.isArray(texture)) {
      texture.forEach((t) => t.destroy(true));
    } else {
      texture.destroy(true);
    }
  }
};
extensions.add(loadBasis);

export { loadBasis };
//# sourceMappingURL=loadBasis.mjs.map
