{"version":3,"file":"loadBasis.js","sources":["../../src/loader/loadBasis.ts"],"sourcesContent":["import { checkExtension, createTexture, LoaderParserPriority } from 'pixijs/assets';\nimport { CompressedTextureResource } from 'pixijs/compressed-textures';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, FORMATS, MIPMAP_MODES, settings } from 'pixijs/core';\nimport { BASIS_FORMAT_TO_TYPE, BASIS_FORMATS } from '../Basis';\nimport { TranscoderWorker } from '../TranscoderWorker';\nimport { BasisParser } from './BasisParser';\n\nimport type { LoadAsset, Loader, LoaderParser } from 'pixijs/assets';\nimport type { IBaseTextureOptions, Texture, TYPES } from 'pixijs/core';\n\n/** Load BASIS textures! */\nexport const loadBasis = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.basis');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        await TranscoderWorker.onTranscoderInitialized;\n\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = await BasisParser.transcode(arrayBuffer);\n\n        const type: TYPES = BASIS_FORMAT_TO_TYPE[resources.basisFormat];\n        const format: FORMATS = resources.basisFormat !== BASIS_FORMATS.cTFRGBA32 ? FORMATS.RGB : FORMATS.RGBA;\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: resource instanceof CompressedTextureResource && resource.levels > 1\n                    ? MIPMAP_MODES.ON_MANUAL\n                    : MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                type,\n                format,\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadBasis);\n"],"names":["ExtensionType","LoaderParserPriority","checkExtension","TranscoderWorker","settings","BasisParser","BASIS_FORMAT_TO_TYPE","BASIS_FORMATS","FORMATS","BaseTexture","CompressedTextureResource","MIPMAP_MODES","ALPHA_MODES","createTexture","extensions"],"mappings":";;;;;;;;;;;AAWO,MAAM,SAAY,GAAA;AAAA,EACrB,SAAW,EAAA;AAAA,IACP,MAAMA,kBAAc,CAAA,UAAA;AAAA,IACpB,UAAUC,2BAAqB,CAAA,IAAA;AAAA,GACnC;AAAA,EAEA,KAAK,GACL,EAAA;AACI,IAAO,OAAAC,qBAAA,CAAe,KAAK,QAAQ,CAAA,CAAA;AAAA,GACvC;AAAA,EAEA,MAAM,IAAA,CAAK,GAAa,EAAA,KAAA,EAAkB,MAC1C,EAAA;AACI,IAAA,MAAMC,iCAAiB,CAAA,uBAAA,CAAA;AAGvB,IAAA,MAAM,QAAW,GAAA,MAAMC,aAAS,CAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AAEjD,IAAM,MAAA,WAAA,GAAc,MAAM,QAAA,CAAS,WAAY,EAAA,CAAA;AAE/C,IAAA,MAAM,SAAY,GAAA,MAAMC,uBAAY,CAAA,SAAA,CAAU,WAAW,CAAA,CAAA;AAEzD,IAAM,MAAA,IAAA,GAAcC,2BAAqB,SAAU,CAAA,WAAA,CAAA,CAAA;AACnD,IAAA,MAAM,SAAkB,SAAU,CAAA,WAAA,KAAgBC,oBAAc,SAAY,GAAAC,YAAA,CAAQ,MAAMA,YAAQ,CAAA,IAAA,CAAA;AAElG,IAAA,MAAM,QAAW,GAAA,SAAA,CAAU,GAAI,CAAA,CAAC,QAChC,KAAA;AACI,MAAM,MAAA,IAAA,GAAO,IAAIC,gBAAA,CAAY,QAAU,EAAA;AAAA,QACnC,MAAA,EAAQ,oBAAoBC,4CAA6B,IAAA,QAAA,CAAS,SAAS,CACrE,GAAAC,iBAAA,CAAa,YACbA,iBAAa,CAAA,GAAA;AAAA,QACnB,WAAWC,gBAAY,CAAA,sBAAA;AAAA,QACvB,IAAA;AAAA,QACA,MAAA;AAAA,QACA,GAAG,KAAM,CAAA,IAAA;AAAA,OACZ,CAAA,CAAA;AAED,MAAO,OAAAC,oBAAA,CAAc,IAAM,EAAA,MAAA,EAAQ,GAAG,CAAA,CAAA;AAAA,KACzC,CAAA,CAAA;AAED,IAAA,OAAO,QAAS,CAAA,MAAA,KAAW,CAAI,GAAA,QAAA,CAAS,CAAK,CAAA,GAAA,QAAA,CAAA;AAAA,GACjD;AAAA,EAEA,OAAO,OACP,EAAA;AACI,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,OAAO,CACzB,EAAA;AACI,MAAA,OAAA,CAAQ,QAAQ,CAAC,CAAA,KAAM,CAAE,CAAA,OAAA,CAAQ,IAAI,CAAC,CAAA,CAAA;AAAA,KAG1C,MAAA;AACI,MAAA,OAAA,CAAQ,QAAQ,IAAI,CAAA,CAAA;AAAA,KACxB;AAAA,GACJ;AAEJ,EAAA;AAEAC,eAAA,CAAW,IAAI,SAAS,CAAA;;;;"}