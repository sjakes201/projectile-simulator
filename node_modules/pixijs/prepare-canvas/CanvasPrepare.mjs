import { BaseTexture, settings, ExtensionType, extensions } from 'pixijs/core';
import { BasePrepare } from 'pixijs/prepare';

const CANVAS_START_SIZE = 16;
function uploadBaseTextures(prepare, item) {
  const tempPrepare = prepare;
  if (item instanceof BaseTexture) {
    const image = item.source;
    const imageWidth = image.width === 0 ? tempPrepare.canvas.width : Math.min(tempPrepare.canvas.width, image.width);
    const imageHeight = image.height === 0 ? tempPrepare.canvas.height : Math.min(tempPrepare.canvas.height, image.height);
    tempPrepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, tempPrepare.canvas.width, tempPrepare.canvas.height);
    return true;
  }
  return false;
}
class CanvasPrepare extends BasePrepare {
  constructor(renderer) {
    super(renderer);
    this.uploadHookHelper = this;
    this.canvas = settings.ADAPTER.createCanvas(CANVAS_START_SIZE, CANVAS_START_SIZE);
    this.ctx = this.canvas.getContext("2d");
    this.registerUploadHook(uploadBaseTextures);
  }
  destroy() {
    super.destroy();
    this.ctx = null;
    this.canvas = null;
  }
}
CanvasPrepare.extension = {
  name: "prepare",
  type: ExtensionType.CanvasRendererSystem
};
extensions.add(CanvasPrepare);

export { CanvasPrepare };
//# sourceMappingURL=CanvasPrepare.mjs.map
