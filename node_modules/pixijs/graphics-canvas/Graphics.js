'use strict';

var canvasRenderer$1 = require('pixijs/renderer/canvas');
var core = require('pixijs/core');
var graphics = require('pixijs/graphics');

let canvasRenderer;
const tempMatrix = new core.Matrix();
graphics.Graphics.prototype.generateCanvasTexture = function generateCanvasTexture(scaleMode, resolution = 1) {
  const bounds = this.getLocalBounds();
  const canvasBuffer = core.RenderTexture.create({
    width: bounds.width,
    height: bounds.height,
    scaleMode,
    resolution
  });
  if (!canvasRenderer) {
    canvasRenderer = new canvasRenderer$1.CanvasRenderer();
  }
  this.transform.updateLocalTransform();
  this.transform.localTransform.copyTo(tempMatrix);
  tempMatrix.invert();
  tempMatrix.tx -= bounds.x;
  tempMatrix.ty -= bounds.y;
  canvasRenderer.render(this, { renderTexture: canvasBuffer, clear: true, transform: tempMatrix });
  const texture = core.Texture.from(canvasBuffer.baseTexture._canvasRenderTarget.canvas, { scaleMode });
  texture.baseTexture.setResolution(resolution);
  return texture;
};
graphics.Graphics.prototype.cachedGraphicsData = [];
graphics.Graphics.prototype._renderCanvas = function _renderCanvas(renderer) {
  if (this.isMask === true) {
    return;
  }
  this.finishPoly();
  renderer.plugins.graphics.render(this);
};
//# sourceMappingURL=Graphics.js.map
