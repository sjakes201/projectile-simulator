class PolygonUtils {
  static offsetPolygon(points, offset) {
    const offsetPoints = [];
    const length = points.length;
    offset = PolygonUtils.isPolygonClockwise(points) ? offset : -1 * offset;
    for (let j = 0; j < length; j += 2) {
      let i = j - 2;
      if (i < 0) {
        i += length;
      }
      const k = (j + 2) % length;
      let v1x = points[j] - points[i];
      let v1y = points[j + 1] - points[i + 1];
      let len = Math.sqrt(v1x * v1x + v1y * v1y);
      v1x /= len;
      v1y /= len;
      v1x *= offset;
      v1y *= offset;
      const norm1x = -v1y;
      const norm1y = v1x;
      const pij1 = [points[i] + norm1x, points[i + 1] + norm1y];
      const pij2 = [points[j] + norm1x, points[j + 1] + norm1y];
      let v2x = points[k] - points[j];
      let v2y = points[k + 1] - points[j + 1];
      len = Math.sqrt(v2x * v2x + v2y * v2y);
      v2x /= len;
      v2y /= len;
      v2x *= offset;
      v2y *= offset;
      const norm2x = -v2y;
      const norm2y = v2x;
      const pjk1 = [points[j] + norm2x, points[j + 1] + norm2y];
      const pjk2 = [points[k] + norm2x, points[k + 1] + norm2y];
      const intersectPoint = PolygonUtils.findIntersection(pij1[0], pij1[1], pij2[0], pij2[1], pjk1[0], pjk1[1], pjk2[0], pjk2[1]);
      if (intersectPoint) {
        offsetPoints.push(...intersectPoint);
      }
    }
    return offsetPoints;
  }
  static findIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {
    const denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    const numeratorA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    const numeratorB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
    if (denominator === 0) {
      if (numeratorA === 0 && numeratorB === 0) {
        return [(x1 + x2) / 2, (y1 + y2) / 2];
      }
      return null;
    }
    const uA = numeratorA / denominator;
    return [x1 + uA * (x2 - x1), y1 + uA * (y2 - y1)];
  }
  static isPolygonClockwise(polygon) {
    let sum = 0;
    for (let i = 0, j = polygon.length - 2; i < polygon.length; j = i, i += 2) {
      sum += (polygon[i] - polygon[j]) * (polygon[i + 1] + polygon[j + 1]);
    }
    return sum > 0;
  }
}

export { PolygonUtils };
//# sourceMappingURL=PolygonUtils.mjs.map
