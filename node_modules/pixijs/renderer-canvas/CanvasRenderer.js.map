{"version":3,"file":"CanvasRenderer.js","sources":["../src/CanvasRenderer.ts"],"sourcesContent":["import {\n    extensions,\n    ExtensionType,\n    RENDERER_TYPE,\n    settings,\n    SystemManager,\n    utils\n} from 'pixijs/core';\n\nimport type {\n    BackgroundSystem,\n    BLEND_MODES,\n    ExtensionMetadata,\n    GenerateTextureSystem,\n    ICanvas,\n    ICanvasRenderingContext2D,\n    IGenerateTextureOptions,\n    IRenderableObject,\n    IRenderer,\n    IRendererOptions,\n    IRendererPlugins,\n    IRendererRenderOptions,\n    Matrix,\n    PluginSystem,\n    Rectangle,\n    RenderTexture,\n    StartupOptions,\n    StartupSystem,\n    ViewSystem,\n} from 'pixijs/core';\nimport type { DisplayObject } from 'pixijs/display';\nimport type { CanvasContextSystem, SmoothingEnabledProperties } from './CanvasContextSystem';\nimport type { CanvasMaskSystem } from './CanvasMaskSystem';\nimport type { CanvasObjectRendererSystem } from './CanvasObjectRendererSystem';\n\nconst { deprecation } = utils;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface CanvasRenderer extends GlobalMixins.CanvasRenderer {}\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that support WebGL.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the view to your DOM or you will not see anything!\n *\n * Renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a renderer:\n *\n * | System                               | Description                                                                   |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n *\n * | Generic Systems                      | Systems that manage functionality that all renderer types share               |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link PIXI.ViewSystem}              | This manages the main view of the renderer usually a Canvas                   |\n * | {@link PIXI.PluginSystem}            | This manages plugins for the renderer                                         |\n * | {@link PIXI.BackgroundSystem}        | This manages the main views background color and alpha                        |\n * | {@link PIXI.StartupSystem}           | Boots up a renderer and initiatives all the systems                           |\n * | {@link PIXI.EventSystem}             | This manages UI events.                                                       |\n * | {@link PIXI.GenerateTextureSystem}   | This adds the ability to generate textures from any PIXI.DisplayObject        |\n *\n * | PixiJS High-Level Systems            | Set of specific systems designed to work with PixiJS objects                  |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link PIXI.CanvasContextSystem}     | This manages the canvas `2d` contexts and their state                         |\n * | {@link PIXI.CanvasMaskSystem}        | This manages masking operations.                                              |\n * | {@link PIXI.CanvasRenderSystem}      | This adds the ability to render a PIXI.DisplayObject                          |\n * | {@link PIXI.CanvasExtract}           | This extracts image data from a PIXI.DisplayObject                            |\n * | {@link PIXI.CanvasPrepare}           | This prepares a PIXI.DisplayObject async for rendering                        |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @class\n * @memberof PIXI\n */\nexport class CanvasRenderer extends SystemManager<CanvasRenderer> implements IRenderer\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.Renderer,\n        priority: 0,\n    };\n\n    /**\n     * Options passed to the constructor.\n     * @member {PIXI.IRendererOptions}\n     */\n    public readonly options: IRendererOptions;\n\n    /**\n     * Used with autoDetectRenderer, this is always supported for any environment, so return true.\n     * @ignore\n     */\n    static test(): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Fired after rendering finishes.\n     * @event PIXI.CanvasRenderer#postrender\n     */\n    /**\n     * Fired before rendering starts.\n     * @event PIXI.CanvasRenderer#prerender\n     */\n\n    /**\n     * The type of the renderer. will be PIXI.RENDERER_TYPE.CANVAS\n     * @member {number}\n     * @see PIXI.RENDERER_TYPE\n     */\n    public readonly type = RENDERER_TYPE.CANVAS;\n\n    /** When logging Pixi to the console, this is the name we will show */\n    public readonly rendererLogId = 'Canvas';\n\n    // systems..\n    /**\n     * textureGenerator system instance\n     * @readonly\n     */\n    public textureGenerator: GenerateTextureSystem;\n\n    /**\n     * background system instance\n     * @readonly\n     */\n    public background: BackgroundSystem;\n\n    /**\n     * canvas mask system instance\n     * @readonly\n     */\n    public mask: CanvasMaskSystem;\n\n    /**\n     * plugin system instance\n     * @readonly\n     */\n    public _plugin: PluginSystem;\n\n    /**\n     * Canvas context system instance\n     * @readonly\n     */\n    public canvasContext: CanvasContextSystem;\n\n    /**\n     * Startup system instance\n     * @readonly\n     */\n    public startup: StartupSystem;\n\n    /**\n     * View system instance\n     * @readonly\n     */\n    public _view: ViewSystem;\n\n    /**\n     * renderer system instance\n     * @readonly\n     */\n    public objectRenderer: CanvasObjectRendererSystem;\n\n    /**\n     * @param {PIXI.IRendererOptions} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoDensity=false] -\n     *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @param {number|string} [options.background] - Alias for `options.backgroundColor`.\n     * @param {number} [options.backgroundAlpha=1] -\n     *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @param {number|string} [options.backgroundColor=0x000000] -\n     *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`),\n     *  hex strings (e.g. `'#f00'` or `'#ff0000'`) or color names (e.g. `'red'`).\n     * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n     * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n     * @param {number} [options.height=600] - The height of the renderer's view.\n     * @param {boolean} [options.hello=false] - Whether to log the version and type information of renderer to console.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n     *  The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.useContextAlpha=true] -\n     *  **Deprecated since 7.0.0, use `premultipliedAlpha` and `backgroundAlpha` instead.** \\\n     *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n     *  If you want to set transparency, please use `backgroundAlpha`.\n     * @param {PIXI.ICanvas} [options.view=null] -\n     *  The canvas to use as the view. If omitted, a new canvas will be created.\n     * @param {number} [options.width=800] - The width of the renderer's view.\n     */\n    constructor(options?: IRendererOptions)\n    {\n        super();\n\n        // Add the default render options\n        options = Object.assign({}, settings.RENDER_OPTIONS, options);\n\n        const systemConfig = {\n            runners: [\n                'init',\n                'destroy',\n                'contextChange',\n                'resolutionChange',\n                'reset',\n                'update',\n                'postrender',\n                'prerender',\n                'resize'\n            ],\n            systems: CanvasRenderer.__systems,\n            priority: [\n                'textureGenerator',\n                'background',\n                '_view',\n                '_plugin',\n                'startup',\n                'mask',\n                'canvasContext',\n                'objectRenderer'\n            ],\n        };\n\n        this.setup(systemConfig);\n\n        if ('useContextAlpha' in options)\n        {\n            // #if _DEBUG\n            deprecation('7.0.0', 'options.useContextAlpha is deprecated, use options.backgroundAlpha instead');\n            // #endif\n            options.backgroundAlpha = options.useContextAlpha === false ? 1 : options.backgroundAlpha;\n        }\n\n        // convert our big blob of options into system specific ones..\n        const startupOptions: StartupOptions = {\n            hello: options.hello,\n            _plugin: CanvasRenderer.__plugins,\n            background: {\n                alpha: options.backgroundAlpha,\n                color: options.background ?? options.backgroundColor,\n                clearBeforeRender: options.clearBeforeRender,\n            },\n            _view: {\n                height: options.height,\n                width: options.width,\n                autoDensity: options.autoDensity,\n                resolution: options.resolution,\n                view: options.view,\n            }\n        };\n\n        this.options = options;\n        this.startup.run(startupOptions);\n    }\n\n    /**\n     * Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     * @param displayObject - The displayObject the object will be generated from.\n     * @param {object} options - Generate texture options.\n     * @param {PIXI.SCALE_MODES} options.scaleMode - The scale mode of the texture.\n     * @param {number} options.resolution - The resolution / device pixel ratio of the texture being generated.\n     * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\n     *        if no region is specified, defaults to the local bounds of the displayObject.\n     * @param {PIXI.MSAA_QUALITY} options.multisample - The number of samples of the frame buffer.\n     * @returns A texture of the graphics object.\n     */\n    generateTexture(displayObject: IRenderableObject, options?: IGenerateTextureOptions): RenderTexture\n    {\n        return this.textureGenerator.generateTexture(displayObject, options);\n    }\n\n    reset(): void\n    {\n        // nothing to be done :D\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     * @param displayObject - The object to be rendered.\n     * @param options - Object to use for render options.\n     * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\n     * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\n     * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\n     */\n    render(displayObject: DisplayObject, options?: IRendererRenderOptions): void\n    {\n        this.objectRenderer.render(displayObject, options);\n    }\n\n    /** Clear the canvas of renderer. */\n    public clear(): void\n    {\n        this.canvasContext.clear();\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    public destroy(removeView?: boolean): void\n    {\n        this.runners.destroy.items.reverse();\n\n        this.emitWithCustomOptions(this.runners.destroy, {\n            _view: removeView,\n        });\n\n        super.destroy();\n    }\n\n    /** Collection of plugins */\n    get plugins(): IRendererPlugins\n    {\n        return this._plugin.plugins;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     * @param desiredScreenWidth - the desired width of the screen\n     * @param desiredScreenHeight - the desired height of the screen\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        this._view.resizeView(desiredScreenWidth, desiredScreenHeight);\n    }\n\n    /**\n     * Same as view.width, actual number of pixels in the canvas by horizontal.\n     * @member {number}\n     * @readonly\n     * @default 800\n     */\n    get width(): number\n    {\n        return this._view.element.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical.\n     * @member {number}\n     * @readonly\n     * @default 600\n     */\n    get height(): number\n    {\n        return this._view.element.height;\n    }\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this._view.resolution;\n    }\n    set resolution(value: number)\n    {\n        this._view.resolution = value;\n        this.runners.resolutionChange.emit(value);\n    }\n\n    /** Whether CSS dimensions of canvas view should be resized to screen dimensions automatically. */\n    get autoDensity(): boolean\n    {\n        return this._view.autoDensity;\n    }\n\n    /** The canvas element that everything is drawn to.*/\n    get view(): ICanvas\n    {\n        return this._view.element;\n    }\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    get screen(): Rectangle\n    {\n        return this._view.screen;\n    }\n\n    /** the last object rendered by the renderer. Useful for other plugins like interaction managers */\n    get lastObjectRendered(): IRenderableObject\n    {\n        return this.objectRenderer.lastObjectRendered;\n    }\n\n    /** Flag if we are rendering to the screen vs renderTexture */\n    get renderingToScreen(): boolean\n    {\n        return this.objectRenderer.renderingToScreen;\n    }\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    get clearBeforeRender(): boolean\n    {\n        return this.background.clearBeforeRender;\n    }\n\n    // deprecated zone..\n\n    /**\n     * Tracks the blend modes useful for this renderer.\n     * @deprecated since 7.0.0 use `renderer.canvasContext.blendModes` instead\n     */\n    get blendModes(): string[]\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.blendModes has been deprecated, please use renderer.canvasContext.blendModes instead');\n        // #endif\n\n        return this.canvasContext.blendModes;\n    }\n\n    /**\n     * system that manages canvas masks\n     * @deprecated since 7.0.0 use `renderer.canvasContext.mask`\n     */\n    get maskManager(): CanvasMaskSystem\n    {\n        deprecation('7.0.0', 'renderer.maskManager has been deprecated, please use renderer.mask instead');\n\n        return this.mask;\n    }\n\n    /**\n     * Boolean flag controlling canvas refresh.\n     * @deprecated since 7.0.0\n     */\n    get refresh(): boolean\n    {\n        // #if _DEBUG\n        deprecation('7.0.0', 'renderer.refresh has been deprecated');\n        // #endif\n\n        return true;\n    }\n\n    /**\n     * The root canvas 2d context that everything is drawn with.\n     * @deprecated since 7.0.0 Use `renderer.canvasContext.rootContext instead\n     */\n    get rootContext(): ICanvasRenderingContext2D\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.rootContext has been deprecated, please use renderer.canvasContext.rootContext instead');\n        // #endif\n\n        return this.canvasContext.rootContext;\n    }\n\n    /**\n     * The currently active canvas 2d context (could change with renderTextures)\n     * @deprecated since 7.0.0 Use `renderer.canvasContext.activeContext instead\n     */\n    get context(): ICanvasRenderingContext2D\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.context has been deprecated, please use renderer.canvasContext.activeContext instead');\n        // #endif\n\n        return this.canvasContext.activeContext;\n    }\n\n    /**\n     * The canvas property used to set the canvas smoothing property.\n     * @deprecated since 7.0.0 Use `renderer.canvasContext.smoothProperty` instead.\n     */\n    get smoothProperty(): SmoothingEnabledProperties\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.smoothProperty has been deprecated, please use renderer.canvasContext.smoothProperty instead');\n        // #endif\n\n        return this.canvasContext.smoothProperty;\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     * @deprecated since 7.0.0 Use `renderer.canvasContext.setBlendMode` instead.\n     */\n    setBlendMode(blendMode: BLEND_MODES, readyForOuterBlend?: boolean): void\n    {\n        // #if _DEBUG\n        deprecation('7.0.0', 'renderer.setBlendMode has been deprecated, use renderer.canvasContext.setBlendMode instead');\n        // #endif\n\n        this.canvasContext.setBlendMode(blendMode, readyForOuterBlend);\n    }\n\n    /**\n     * Checks if blend mode has changed.\n     * @deprecated since 7.0.0 Use `renderer.canvasContext.invalidateBlendMode` instead.\n     */\n    invalidateBlendMode(): void\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.invalidateBlendMode has been deprecated, use renderer.canvasContext.invalidateBlendMode instead');\n        // #endif\n\n        this.canvasContext.invalidateBlendMode();\n    }\n\n    /**\n     * Sets matrix of context.\n     * called only from render() methods\n     * takes care about resolution\n     * @param transform - world matrix of current element\n     * @param roundPixels - whether to round (tx,ty) coords\n     * @param localResolution - If specified, used instead of `renderer.resolution` for local scaling\n     * @deprecated since 7.0.0 - Use `renderer.canvasContext.setContextTransform` instead.\n     */\n    setContextTransform(transform: Matrix, roundPixels?: boolean, localResolution?: number): void\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.setContextTransform has been deprecated, use renderer.canvasContext.setContextTransform instead');\n        // #endif\n\n        this.canvasContext.setContextTransform(transform, roundPixels, localResolution);\n    }\n\n    /**\n     * The background color to fill if not transparent\n     * @deprecated since 7.0.0\n     */\n    get backgroundColor(): number\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.backgroundColor has been deprecated, use renderer.background.color instead.');\n        // #endif\n\n        return this.background.color;\n    }\n\n    /**\n     * @deprecated since 7.0.0\n     */\n    set backgroundColor(value: number)\n    {\n        // #if _DEBUG\n        deprecation('7.0.0', 'renderer.backgroundColor has been deprecated, use renderer.background.color instead.');\n        // #endif\n\n        this.background.color = value;\n    }\n\n    /**\n     * The background color alpha. Setting this to 0 will make the canvas transparent.\n     * @member {number}\n     * @deprecated since 7.0.0\n     */\n    get backgroundAlpha(): number\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.');\n        // #endif\n\n        return this.background.color;\n    }\n\n    /**\n     * @deprecated since 7.0.0\n     */\n    set backgroundAlpha(value: number)\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation('7.0.0', 'renderer.backgroundAlpha has been deprecated, use renderer.background.alpha instead.');\n        // #endif\n\n        this.background.alpha = value;\n    }\n\n    /**\n     * old abstract function not used by canvas renderer\n     * @deprecated since 7.0.0\n     */\n    get preserveDrawingBuffer(): boolean\n    {\n        // #if _DEBUG\n        deprecation('7.0.0', 'renderer.preserveDrawingBuffer has been deprecated');\n        // #endif\n\n        return false;\n    }\n\n    /**\n     * old abstract function not used by canvas renderer\n     * @deprecated since 7.0.0\n     */\n    get useContextAlpha(): boolean\n    {\n        // #if _DEBUG\n        deprecation('7.0.0', 'renderer.useContextAlpha has been deprecated');\n        // #endif\n\n        return false;\n    }\n\n    /** @private */\n    static readonly __plugins: IRendererPlugins = {};\n\n    /** @private */\n    static readonly __systems: Record<string, any> = {};\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @member {object} plugins\n     * @readonly\n     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\n     */\n}\n\nextensions.handleByMap(ExtensionType.CanvasRendererPlugin, CanvasRenderer.__plugins);\nextensions.handleByMap(ExtensionType.CanvasRendererSystem, CanvasRenderer.__systems);\nextensions.add(CanvasRenderer);\n"],"names":["utils","SystemManager","RENDERER_TYPE","settings","ExtensionType","extensions"],"mappings":"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"}